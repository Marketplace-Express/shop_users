name: docker

on:
    push:
        # publish image as master=dev or on new tag
        # except on document and ci changes
        branches:
            - main
            - development
        tags:
            - '*'
        paths-ignore:
            - '**.md'
            - '.github/workflows/*yml'

    # always run tests on merge
    # except on document and ci changes
    pull_request:
        paths-ignore:
            - '**.md'
            - '.github/workflows/*yml'

env:
    MYSQL_TEST_USER: shop_users
    MYSQL_TEST_PASSWORD: secret
    MYSQL_TEST_DB: shop_users_test
    RABBITMQ_USERNAME: guest
    RABBITMQ_PASSWORD: guest

jobs:
    unit_test:
        runs-on: ubuntu-latest
        if: github.event_name == 'pull_request'
        services:
            mysql:
                image: mysql:8
                ports:
                    - 3306
                options: --health-cmd="mysqladmin ping"
                    --health-interval=5s
                    --health-timeout=2s
                    --health-retries=3
                    -e MYSQL_ALLOW_EMPTY_PASSWORD=yes
                    -e MYSQL_USER=shop_users
                    -e MYSQL_PASSWORD=secret
                    -e MYSQL_DATABASE=shop_users_test
                    --entrypoint sh mysql:8 -c "exec docker-entrypoint.sh mysqld --default-authentication-plugin=mysql_native_password"

            rabbitmq:
                image: rabbitmq
                ports:
                    - 5672
                options: --health-cmd="rabbitmq-diagnostics -q ping"
                    --health-interval=5s
                    --health-timeout=2s
                    --health-retries=3
        steps:
            - name: Get MySQL service ID
              id: mysql-service
              run: echo "::set-output name=container-id::$(docker ps | grep -i mysql | awk '{print $1}')"

            - name: Get Github network gateway address
              id: github-network
              run: echo "::set-output name=gateway-address::$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.Gateway}}{{end}}' ${{ steps.mysql-service.outputs.container-id }})"

            - name: Create docker network
              run: docker network create marketplace-network

            - name: Check out Site Repository ðŸ“„
              uses: actions/checkout@v2

            - name: Create .env file
              run: cp .env.example .env.testing

            - name: Replace environment variables
              run: |
                  sed -i 's/DB_HOST.*/DB_HOST=${{ steps.github-network.outputs.gateway-address }}/g' .env.testing
                  sed -i 's/DB_PORT.*/DB_PORT=${{ job.services.mysql.ports[3306] }}/g' .env.testing
                  sed -i 's/DB_USERNAME.*/DB_USERNAME=${{ env.MYSQL_TEST_USER }}/g' .env.testing
                  sed -i 's/DB_PASSWORD.*/DB_PASSWORD=${{ env.MYSQL_TEST_PASSWORD }}/g' .env.testing
                  sed -i 's/DB_DATABASE.*/DB_DATABASE=${{ env.MYSQL_TEST_DB }}/g' .env.testing
                  sed -i 's/JURRY_RABBITMQ_HOST.*/JURRY_RABBITMQ_HOST=${{ steps.github-network.outputs.gateway-address }}/g' .env.testing
                  sed -i 's/JURRY_RABBITMQ_PORT.*/JURRY_RABBITMQ_PORT=${{ job.services.rabbitmq.ports[5672] }}/g' .env.testing
                  sed -i 's/JURRY_RABBITMQ_USERNAME.*/JURRY_RABBITMQ_USERNAME=${{ env.RABBITMQ_USERNAME }}/g' .env.testing
                  sed -i 's/JURRY_RABBITMQ_PASSWORD.*/JURRY_RABBITMQ_PASSWORD=${{ env.RABBITMQ_PASSWORD }}/g' .env.testing

            - name: Debugging
              run: cat .env.testing
              
            - name: Build docker image
              run: docker build -t marketplace_shop_users .

            - name: Running unit test
              run: docker-compose run users-unit-test